start: ${ (produceParams.client.data; $millis()) } #record start time, after test dataset has been computed
# producer will be sending some test data
produceParams:
  type: "my-topic"
  client:
    type: test
    data: ${['han', 'leia', 'R2-D2', 'Owen', 'Biggs', 'Obi-Wan', 'Anakin', 'Chewbacca', 'Wedge']}
# the subscriber's 'to' function will be called on each received event
subscribeParams: #parameters for subscribing to an event
  source: cloudEvent
  type: /${ produceParams.type } # subscribe to the same topic as we are publishing to test events
  to: /${ function($rebel) { $forked( "/rebel", $rebel) } }
  subscriberId: rebelArmy
  initialPosition: latest
  parallelism: 2
  client:
    type: test
    acks: []
rebel: "luke"
joinResistance:  |
  /${( 
      $details := rebel.$fetch('https://swapi.dev/api/people/?search='&$).json().results[0].name;
      $joined( "/rebelForces/-", $details);
    )}
# starts producer function
send$: $publish(produceParams)
# starts consumer function
recv$: $subscribe(subscribeParams)
# the subscriber's `to` function will write the received data here
rebelForces: [ ]
runtime: ${ (rebelForces; "Rebel forces assembled in " & $string($millis()-start) & " ms")}
