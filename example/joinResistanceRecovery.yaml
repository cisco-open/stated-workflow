start: ${ (produceParams.client.data; $millis()) } #record start time, after test dataset has been computed
# producer will be sending some test data
produceParams:
  type: "rebelDispatch"
  client:
    type: test # test client produces directly to the test subscriber dispatcher
    data: ['luke', 'han', 'leia']
#    data: "${ ['luke', 'han', 'leia'].({name:$, type: /type}) }"
# the subscriber's 'to' function will be called on each received event
subscribeParams: #parameters for subscribing to an event
  source: cloudEvent
  type: /${ produceParams.type } # subscribe to the same topic as we are publishing to test events
  to: /${ function($cloudEvent) { $forked( "/rebel", $cloudEvent) }}
  subscriberId: rebelArmy
  initialPosition: latest
  parallelism: 1
  client:
    type: test
    acks: []
input: null
fetchRebel: |
  /${( 
    $console.debug('fetchRebel input: ' & input);
    $r := input.$fetch('https://swapi.tech/api/people/?name='&$).json().result[0].properties;
    $console.debug('fetchRebel fetched: ' & $r);  
    $set('/fetchLog/-',$rebel);
    $console.debug('logged fetch: ' & $r);
    $r;
  )}
saveRebel: |
  /${(
    $console.debug('saveRebel input: ' & fetchRebel);
    ($count(rebels) = 1 and simulateFailure)?(
      $set('/simulateFailure', false); 
      $console.log('sleep forever on : ' & fetchRebel);
      $sleep(1000000);
    );
    fetchRebel ? $set('/rebels/-',{'name':$rebel.name, 'url':$rebel.homeworld});
    $console.debug('saveRebel saved: ' & {'name':$rebel.name, 'url':$rebel.homeworld});
  )}
# starts producer function
send$: $publish(produceParams)
# starts consumer function
recv$: $subscribe(subscribeParams)
### below are workflow outputs and results
# the workflow will save the rebel to the rebels array below
rebels: [ ]
# fetch log
fetchLog: [ ]
# the below field is used to simulate a failure in the saveRebel function
# it will be set to false after the first failure
simulateFailure: true
# measure runtime
runtime: ${ (rebelForces; "Rebel forces assembled in " & $string($millis()-start) & " ms")}