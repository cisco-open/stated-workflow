# producer will be sending data function output to the "type" topic
produceParams:
  type: "my-topic"
  testData: "${ [1..5].({'name': 'nozzleTime', 'rando': $random()})  }"
  client:
    type: test
# producer will be invoking "to" function for each consumed event
subscribeParams: #parameters for subscribing to a cloud event
  source: cloudEvent
  type: /${ produceParams.type } # subscribe to the same topic as we are publishing to test events
  to: /${ function($e){(
    $set('/rxLog', rxLog~>$append($e));
    )}  }
  subscriberId: dingus
  initialPosition: latest
  client:
      type: test
# starts producer function
send$: $setInterval(function(){$publish(produceParams)}, 100)
# starts consumer function
recv$: $subscribe(subscribeParams)
# rxLog is a field of the template where the consumer function will be storing results of event processing
rxLog: [ ]
# this is a condition that will stop the workflow when rxLog has 5 elements
stop$: ($count(rxLog)=5?($clearInterval(send$);'done'):'still going')
