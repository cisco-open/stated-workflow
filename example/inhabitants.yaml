# producer will be sending some test data
produceParams:
  type: "my-topic"
  client:
    type: test
    data: ${[1..6].($fetch('https://swapi.tech/api/planets/?page=' & $string($)).json().results)}
subscribeResidents:
  source: cloudEvent
  type: /${ produceParams.type } # subscribe to the same topic as we are publishing to test events
  to: /${ getResidentsWorkflow }
  subscriberId: subscribeResidents
  parallelism: 4
  client:
    type: test
getResidentsWorkflow:
  function: /${ function($planetInfo){ $planetInfo ~> $serial([extractResidents, fetchResidents]) }  }
extractResidents:
    function: /${ function($planet){$planet.residents.($fetch($).json())}  }
fetchResidents:
    function: /${ function($resident){$resident?$set('/residents/-',{'name':$resident.name, 'url':$resident.url})}  }
residents: [ ]
# starts producer function
send$: $publish(produceParams)
recv$: $subscribe(subscribeResidents)

