# Platform APIs


# set up
# read fsoc config file and get the current context object
#      name: <tenant>
#      auth_method: oauth
#      url: https://<tenant>.observe.appdynamics.com
#      tenant: <tenant-id>
#      user: <user@email>
#      token: <redacted>
#      refresh_token: <redacted>
# context indicates that this field is temporary and should not go into the template
context: |
  /${(
    $fsoc := $readObject('~/.fsoc');
    $fsoc.contexts[name=$fsoc.current_context];
  )}
env!: |
  /${(
    $getEnv();
  )}

# url serving stated-workflow APIs
# on the platform, a zodiac function can make calls to the json-store APIs using $APPD_JSON_STORE_URL.
# platform URL does not require protocol or '/knowledge-store' in the path, while calling from outside of the platform
# requires it.
#
# Zodiac function URL: $APPD_JSON_STORE_URL/v1/objects/extensibility:solution/agent
# External APIs URL: https://<tenant>.observe.appdynamics.com/knowledge-store/v1/objects/extensibility:solution/agent
baseUrl: | 
  /${(`env!`.APPD_JSON_STORE_URL ? `env!`.APPD_JSON_STORE_URL : context.url & "/knowledge-store")}
user: "arch3@yopmail.com"



## helper functions
# helper function to call Platform APIs and handle response
callPlatformApi: |
  /${ function($baseUrl, $path, $context) {( 
    $r := $fetch($baseUrl & $path, $context);
    ($r = 'undefined' or $r.status > 200)? $r.json() : $r.json();
  )}}

# knowledge-store
callKSApi: |
  /${ function($path) {( 
    $baseUrl := (`env!`.APPD_METRICS_URL ? `env!`.APPD_METRICS_URL : context.url & "/");
    callPlatformApi($baseUrl, "/v1/objects/" & $path, (context.token? getKSContextLaptop: getKSContextPlatform));
  )}}

# uql
# curl -X 'POST' -d '{"query":"fetch id from entities"}'
#   -H 'Accept: application/json'
#   -H 'Authorization: Bearer REDACTED'
#   -H 'Content-Type: application/json'
#     'https://arch3.saas.appd-test.com/monitoring/v1/query/execute'
callUQLApi: |
  /${ function($path) {(
    $baseUrl := (`env!`.APPD_JSON_STORE_URL ? `env!`.APPD_JSON_STORE_URL : context.url & "/knowledge-store");
    $requestContext := (context.token? getUQLContextLaptop: getUQLContextPlatform);
    $requestContext := |$requestContext|{"body": { "query": $path }}|;
  )}}
#    callPlatformApi($baseUrl, "/monitoring/v1/query/execute/", $uqlContext);

## HTTP Request headers
# call knowledge store from platform
# curl -i -X 'GET'
#   -H 'Accept: application/json'
#   -H 'Layer-Id: 55f8da9d-93de-4bf2-b818-c2c2ac1d3f8d'
#   -H 'Layer-Type: TENANT' $APPD_JSON_STORE_URL/v1/objects/extensibility:solution/agent
#   -H'appd-pty: IlVTRVIi'
#   -H'appd-pid: ImZvb0BiYXIuY29tIg=='
getKSContextPlatform:
  method: GET
  headers:
    Content-Type: "application/json"
    Layer-Id: "2d4866c4-0a45-41ec-a534-011e5f4d970a"
    Layer-Type: "TENANT"
    appd-pid: /${ $toBase64(user) }
    appd-pty: /${ $toBase64('USER') }


getKSContextLaptop:
  method: GET
  headers:
    Content-Type: "application/json"
    Authorization: /${ "Bearer " & context.token }
    Layer-Id: /${ context.tenant }
    Layer-Type: "TENANT"

# curl -X 'POST' -d '{"query":"fetch id from entities"}'
#   -H 'Accept: application/json'
#   -H 'Authorization: Bearer REDACTED'
#   -H 'Content-Type: application/json'
#     'https://arch3.saas.appd-test.com/monitoring/v1/query/execute'
postUQLContext:
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: /${ "Bearer " & context.token }
# main
container: | 
  /${ callKSApi("fmm:entity/infra@1:container") }
agent: | 
  /${ callKSApi("extensibility:solution/agent") }
uql: |
    /${ callUQLApi("fetch id from entities") }
